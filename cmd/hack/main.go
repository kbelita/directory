/*
Hack to try to reissue certificates and correctly update alice and bob.
*/
package main

import (
	"bytes"
	"context"
	"crypto/x509"
	"encoding/base64"
	"encoding/pem"
	"fmt"
	"log"
	"time"

	"github.com/joho/godotenv"
	"github.com/trisacrypto/directory/pkg/gds/config"
	"github.com/trisacrypto/directory/pkg/gds/models/v1"
	"github.com/trisacrypto/directory/pkg/gds/secrets"
	"github.com/trisacrypto/directory/pkg/gds/store"
	pb "github.com/trisacrypto/trisa/pkg/trisa/gds/models/v1beta1"
	"github.com/trisacrypto/trisa/pkg/trust"
	"google.golang.org/protobuf/proto"
)

var (
	db   store.Store
	conf config.Config
)

func main() {
	// Load the dotenv file if it exists
	godotenv.Load()

	var err error

	// Load the configuration from the environment
	if conf, err = config.New(); err != nil {
		log.Fatal(err)
	}
	conf.Database.ReindexOnBoot = false

	// Connect to the trtl server and create a store to access data directly like GDS
	if db, err = store.Open(conf.Database); err != nil {
		log.Fatal(err)
	}

	// JOB 1: update the Alice and Bob records if we're on the TestNet.
	// if err = updateRobotCerts(); err != nil {
	// 	log.Fatal(err)
	// }

	// JOB 2: reissue certificates for NMS
	// if err = reissueNMSCerts(); err != nil {
	// 	log.Fatal(err)
	// }

	// JOB 3: reissue certificates for Sygna
	if err = reissueSygnaCerts(); err != nil {
		log.Fatal(err)
	}
}

func updateRobotCerts() (err error) {
	names := map[string]string{
		"alice": "7a96ca2c-2818-4106-932e-1bcfd743b04c",
		"bob":   "9e069e01-8515-4d57-b9a5-e249f7ab4fca",
	}

	for name, vaspID := range names {
		// Lookup the VASP record
		var vasp *pb.VASP
		if vasp, err = db.RetrieveVASP(vaspID); err != nil {
			return fmt.Errorf("unable to retrieve %s record: %v", name, err)
		}

		// Unmarshal the identity certificate
		var data []byte
		if data, err = base64.StdEncoding.DecodeString(certs[name]); err != nil {
			return fmt.Errorf("could not deocde base64 for %s: %v", name, err)
		}

		vasp.IdentityCertificate = new(pb.Certificate)
		if err = proto.Unmarshal(data, vasp.IdentityCertificate); err != nil {
			return fmt.Errorf("could not unmarshal %s certificate: %v", name, err)
		}

		// Update the VASP status as verified/certificate issued
		if err = models.UpdateVerificationStatus(vasp, pb.VerificationState_VERIFIED, "manual certificate reissuance", "benjamin@rotational.io"); err != nil {
			return fmt.Errorf("could not update VASP verification status %s: %v", name, err)
		}
		if err = db.UpdateVASP(vasp); err != nil {
			return fmt.Errorf("could not update VASP %s: %v", name, err)
		}

		// Create certificate request for the issued certs
		if err = db.UpdateCertReq(certreqs[name]); err != nil {
			return fmt.Errorf("could not save certificate request for VASP %s: %v", name, err)
		}
	}
	return nil
}

var certs = map[string]string{
	"alice": "",
	"bob":   "",
}

var certreqs = map[string]*models.CertificateRequest{
	"alice": {
		Id:           "e2d7ef62-28e2-4fb9-9fd6-4fb107d942a6",
		Vasp:         "7a96ca2c-2818-4106-932e-1bcfd743b04c",
		CommonName:   "api.alice.vaspbot.net",
		Status:       models.CertificateRequestState_COMPLETED,
		AuthorityId:  23,
		BatchId:      309867,
		BatchName:    "trisatest.net-certreq-e2d7ef62-28e2-4fb9-9fd6-4fb107d942a6",
		BatchStatus:  "READY_FOR_DOWNLOAD",
		OrderNumber:  309867,
		CreationDate: "2022-02-28T11:39:38.000+0000",
		Profile:      "CipherTrace EE",
		RejectReason: "",
		Params:       map[string]string{},
		Created:      time.Now().Format(time.RFC3339Nano),
	},
	"bob": {
		Id:           "1177a95b-7e24-411a-a0a8-3210e4b93b2b",
		Vasp:         "9e069e01-8515-4d57-b9a5-e249f7ab4fca",
		CommonName:   "api.bob.vaspbot.net",
		Status:       models.CertificateRequestState_COMPLETED,
		AuthorityId:  23,
		BatchId:      309870,
		BatchName:    "trisatest.net-certreq-1177a95b-7e24-411a-a0a8-3210e4b93b2b",
		BatchStatus:  "READY_FOR_DOWNLOAD",
		OrderNumber:  309870,
		CreationDate: "2022-02-28T11:53:42.000+0000",
		Profile:      "CipherTrace EE",
		RejectReason: "",
		Params:       map[string]string{},
		Created:      time.Now().Format(time.RFC3339Nano),
	},
}

func reissueNMSCerts() (err error) {
	var vasp *pb.VASP
	vaspID := "00634f29-e22e-48f5-be2a-74feeee33464"
	commonName := "eczesgsg.trisa.test-travelrule.sygna.io"
	endpoint := "eczesgsg.trisa.test-travelrule.sygna.io:443"

	if vasp, err = db.RetrieveVASP(vaspID); err != nil {
		return fmt.Errorf("could not retrieve vasp record: %v", err)
	}

	// Reset the Travel Rule information
	vasp.CommonName = commonName
	vasp.TrisaEndpoint = endpoint
	vasp.IdentityCertificate = nil

	// Cannot validate
	// if err = vasp.Validate(false); err != nil {
	// 	return fmt.Errorf("vasp is not valid: %v", err)
	// }

	if err = models.UpdateVerificationStatus(vasp, pb.VerificationState_REVIEWED, "manually reissuing testnet certificates", "benjamin@rotational.io"); err != nil {
		return fmt.Errorf("could not update VASP record: %v", err)
	}

	// Create a new certificate request for the reissuance
	password := secrets.CreateToken(16)
	fmt.Printf("password is %q\n", password)

	var certreq *models.CertificateRequest
	if certreq, err = models.NewCertificateRequest(vasp); err != nil {
		return err
	}

	if err = models.UpdateCertificateRequestStatus(certreq, models.CertificateRequestState_READY_TO_SUBMIT, "reissue certificates", "benjamin@rotational.io"); err != nil {
		return fmt.Errorf("could not update certreq: %v", err)
	}

	// Connect to secret manager
	var sm *secrets.SecretManager
	if sm, err = secrets.New(conf.Secrets); err != nil {
		return err
	}

	// Make a new secret of type password
	secretType := "password"
	if err = sm.With(certreq.Id).CreateSecret(context.TODO(), secretType); err != nil {
		return err
	}
	if err = sm.With(certreq.Id).AddSecretVersion(context.TODO(), secretType, []byte(password)); err != nil {
		return err
	}

	// Update the certreq
	if err = db.UpdateCertReq(certreq); err != nil {
		return err
	}

	// Append the certificate request to the VASP
	if err = models.AppendCertReqID(vasp, certreq.Id); err != nil {
		return err
	}

	// Update the vasp
	if err = db.UpdateVASP(vasp); err != nil {
		return err
	}

	return nil
}

var vasptest1cert = ""

var vasptest2cert = ""

func reissueSygnaCerts() (err error) {
	// Retrieve Sygna VASPs to edit
	var vasptest1, vasptest2 *pb.VASP
	vasptest1ID := "79246c65-0175-43ae-94c9-6a8d12745c44"
	vasptest2ID := "4ff75b3e-a312-490d-a4c2-f17ab7bb9119"

	if vasptest1, err = db.RetrieveVASP(vasptest1ID); err != nil {
		return fmt.Errorf("could not retrieve vasptest1 record: %v", err)
	}

	if vasptest2, err = db.RetrieveVASP(vasptest2ID); err != nil {
		return fmt.Errorf("could not retrieve vasptest2 record: %v", err)
	}

	// Update the legal person record for each VASP
	vasptest1.Entity.Name.NameIdentifiers[0].LegalPersonName = "COOLBITX LTD. TAIWAN BRANCH (CAYMAN) - TEST (GATETW05)"
	vasptest2.Entity.Name.NameIdentifiers[0].LegalPersonName = "COOLBITX LTD. TAIWAN BRANCH (CAYMAN) - DEV-HUB"

	// Update common name and endpoint for each VASP
	vasptest1.CommonName = "gatetw05.test-travelrule.sygna.io"
	vasptest1.TrisaEndpoint = vasptest1.CommonName + ":443"

	vasptest2.CommonName = "hub-trisa.brahma-dev-jp.sygna.io"
	vasptest2.TrisaEndpoint = vasptest2.CommonName + ":443"

	// Load the identity certificates from protobufs
	vasptest1.IdentityCertificate = new(pb.Certificate)
	vasptest2.IdentityCertificate = new(pb.Certificate)

	var data1 []byte
	if data1, err = base64.StdEncoding.DecodeString(vasptest1cert); err != nil {
		return err
	}

	if err = proto.Unmarshal(data1, vasptest1.IdentityCertificate); err != nil {
		return err
	}

	var data2 []byte
	if data2, err = base64.StdEncoding.DecodeString(vasptest2cert); err != nil {
		return err
	}

	if err = proto.Unmarshal(data2, vasptest2.IdentityCertificate); err != nil {
		return err
	}

	// Cannot validate
	// if err = vasptest1.Validate(false); err != nil {
	// 	return fmt.Errorf("vasptest1 is not valid: %v", err)
	// }
	// if err = vasptest2.Validate(false); err != nil {
	// 	return fmt.Errorf("vasptest2 is not valid: %v", err)
	// }

	if err = models.UpdateVerificationStatus(vasptest1, pb.VerificationState_VERIFIED, "manually reissued testnet certificates", "benjamin@rotational.io"); err != nil {
		return fmt.Errorf("could not update VASP record: %v", err)
	}

	if err = models.UpdateVerificationStatus(vasptest2, pb.VerificationState_VERIFIED, "manually reissued testnet certificates", "benjamin@rotational.io"); err != nil {
		return fmt.Errorf("could not update VASP record: %v", err)
	}

	// Create new certificate requests for the reissuance
	password1 := secrets.CreateToken(16)
	password2 := secrets.CreateToken(16)

	fmt.Printf("password for %s (%s): %q\n", vasptest1.CommonName, vasptest1.Id, password1)
	fmt.Printf("password for %s (%s): %q\n", vasptest2.CommonName, vasptest2.Id, password2)

	var certreq1 *models.CertificateRequest
	if certreq1, err = models.NewCertificateRequest(vasptest1); err != nil {
		return err
	}

	var certreq2 *models.CertificateRequest
	if certreq2, err = models.NewCertificateRequest(vasptest2); err != nil {
		return err
	}

	certreq1.Id = "b6b432d9-0ecf-49c5-a5bd-7c59cc422811"
	certreq1.Params["commonName"] = vasptest1.CommonName
	certreq1.Params["dNSName"] = "gatetw05.test-travelrule.sygna.io;gabojpty.test-travelrule.sygna.io;testtwte.test-travelrule.sygna.io;bitbkrse.test-travelrule.sygna.io;doratwtp.test-travelrule.sygna.io;jmchtw02.test-travelrule.sygna.io;gabotwtp.test-travelrule.sygna.io;gaboaumu.test-travelrule.sygna.io;vasptw99.test-travelrule.sygna.io;gatetw06.test-travelrule.sygna.io;sygnafqn.test-travelrule.sygna.io;testtttt.test-travelrule.sygna.io;sygntw81.test-travelrule.sygna.io;gabocato.test-travelrule.sygna.io;sygnafxm.test-travelrule.sygna.io;sygnaf7s.test-travelrule.sygna.io;sygngbln.test-travelrule.sygna.io;sygnafol.test-travelrule.sygna.io;gatetw11.test-travelrule.sygna.io;sygnafn8.test-travelrule.sygna.io"
	certreq1.AuthorityId = 23
	certreq1.BatchId = 314706
	certreq1.BatchName = "trisatest.net-certreq-b6b432d9-0ecf-49c5-a5bd-7c59cc422811"
	certreq1.BatchStatus = "READY_FOR_DOWNLOAD"
	certreq1.OrderNumber = 314706
	certreq1.CreationDate = "2022-03-29 21:47:00"
	certreq1.Profile = "CipherTrace EE"

	certreq2.Id = "1bc4eb32-6a63-4865-865a-98cefb465891"
	certreq2.Params["commonName"] = vasptest2.CommonName
	certreq2.Params["dNSName"] = ""
	certreq2.AuthorityId = 23
	certreq2.BatchId = 314708
	certreq2.BatchName = "trisatest.net-certreq-1bc4eb32-6a63-4865-865a-98cefb465891"
	certreq2.BatchStatus = "READY_FOR_DOWNLOAD"
	certreq2.OrderNumber = 314708
	certreq2.CreationDate = "2022-03-29 21:48:42"
	certreq2.Profile = "CipherTrace EE"

	if err = models.UpdateCertificateRequestStatus(certreq1, models.CertificateRequestState_COMPLETED, "manual certificate request entry", "benjamin@rotational.io"); err != nil {
		return fmt.Errorf("could not update certreq: %v", err)
	}

	if err = models.UpdateCertificateRequestStatus(certreq2, models.CertificateRequestState_COMPLETED, "manual certificate request entry", "benjamin@rotational.io"); err != nil {
		return fmt.Errorf("could not update certreq: %v", err)
	}

	// Connect to secret manager
	var sm *secrets.SecretManager
	if sm, err = secrets.New(conf.Secrets); err != nil {
		return err
	}

	// Make a new secret of type password
	secretType := "password"
	if err = sm.With(certreq1.Id).CreateSecret(context.TODO(), secretType); err != nil {
		return err
	}
	if err = sm.With(certreq1.Id).AddSecretVersion(context.TODO(), secretType, []byte(password1)); err != nil {
		return err
	}
	if err = sm.With(certreq2.Id).CreateSecret(context.TODO(), secretType); err != nil {
		return err
	}
	if err = sm.With(certreq2.Id).AddSecretVersion(context.TODO(), secretType, []byte(password2)); err != nil {
		return err
	}

	// Update the certreq
	if err = db.UpdateCertReq(certreq1); err != nil {
		return err
	}
	if err = db.UpdateCertReq(certreq2); err != nil {
		return err
	}

	// Append the certificate request to the VASP
	if err = models.AppendCertReqID(vasptest1, certreq1.Id); err != nil {
		return err
	}
	if err = models.AppendCertReqID(vasptest2, certreq2.Id); err != nil {
		return err
	}

	// Update the vasps
	if err = db.UpdateVASP(vasptest1); err != nil {
		return err
	}
	fmt.Println(vasptest1.CommonName + " updated")

	if err = db.UpdateVASP(vasptest2); err != nil {
		return err
	}
	fmt.Println(vasptest2.CommonName + " updated")

	return nil
}

func makeIdentityCertificate(path, pkcs12password string) (err error) {
	var archive *trust.Serializer
	if archive, err = trust.NewSerializer(true, pkcs12password, trust.CompressionZIP); err != nil {
		return err
	}

	var provider *trust.Provider
	if provider, err = archive.ReadFile(path); err != nil {
		return err
	}

	var cert *x509.Certificate
	if cert, err = provider.GetLeafCertificate(); err != nil {
		return err
	}

	pub := &pb.Certificate{
		Version:            int64(cert.Version),
		SerialNumber:       cert.SerialNumber.Bytes(),
		Signature:          cert.Signature,
		SignatureAlgorithm: cert.SignatureAlgorithm.String(),
		PublicKeyAlgorithm: cert.PublicKeyAlgorithm.String(),
		Subject: &pb.Name{
			CommonName:         cert.Subject.CommonName,
			SerialNumber:       cert.Subject.SerialNumber,
			Organization:       cert.Subject.Organization,
			OrganizationalUnit: cert.Subject.OrganizationalUnit,
			StreetAddress:      cert.Subject.StreetAddress,
			Locality:           cert.Subject.Locality,
			Province:           cert.Subject.Province,
			PostalCode:         cert.Subject.PostalCode,
			Country:            cert.Subject.Country,
		},
		Issuer: &pb.Name{
			CommonName:         cert.Issuer.CommonName,
			SerialNumber:       cert.Issuer.SerialNumber,
			Organization:       cert.Issuer.Organization,
			OrganizationalUnit: cert.Issuer.OrganizationalUnit,
			StreetAddress:      cert.Issuer.StreetAddress,
			Locality:           cert.Issuer.Locality,
			Province:           cert.Issuer.Province,
			PostalCode:         cert.Issuer.PostalCode,
			Country:            cert.Issuer.Country,
		},
		NotBefore: cert.NotBefore.Format(time.RFC3339),
		NotAfter:  cert.NotAfter.Format(time.RFC3339),
		Revoked:   false,
	}

	// Write the public certificate into the directory service data store
	buf := bytes.NewBuffer(nil)
	if err = pem.Encode(buf, &pem.Block{Type: "CERTIFICATE", Bytes: cert.Raw}); err != nil {
		return fmt.Errorf("could not PEM encode certificate: %s", err)
	}
	pub.Data = buf.Bytes()

	// Write the entire provider chain into the directory service data store
	if archive, err = trust.NewSerializer(false, "", trust.CompressionGZIP); err != nil {
		return err
	}

	// Ensure only the public keys are written to the directory service
	if pub.Chain, err = archive.Compress(provider.Public()); err != nil {
		return err
	}

	// Now serialize and base64 encode the certificate
	var data []byte
	if data, err = proto.Marshal(pub); err != nil {
		return err
	}

	fmt.Println(base64.StdEncoding.EncodeToString(data))
	return nil
}
